{"version":3,"sources":["logo.svg","components/card/card.components.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","hero","id","name","email","CardList","console","log","heroes","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","user","this","heroesFilter","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,oLCG9BC,G,YAAO,SAAAC,GAChB,OACI,yBAAKC,UAAY,kBACb,yBAAKC,IAAM,OACPC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BAEP,wBAAIJ,UAAU,cAAcD,EAAMI,KAAKE,MAAU,6BAChDN,EAAMI,KAAKG,SCNXC,G,MAAW,SAAAR,GAEpB,OADAS,QAAQC,IAAIV,GAER,yBAAKC,UAAY,aACZD,EAAMW,OAAOC,KAAI,SAAAR,GAAI,OAClB,kBAAC,EAAD,CAAMS,IAAKT,EAAKC,GAAID,KAAMA,UCN7BU,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOf,UAAY,SACfgB,KAAO,SACPF,YAAaA,EACbG,SAAUF,MC6CHG,G,wDA5Cb,aAAe,IAAD,8BACZ,gBAoBFH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlBvD,EAAKC,MAAQ,CACXd,OAAS,GACTW,YAAY,IALF,E,gEASO,IAAD,OAClBI,MAAM,8CAA8CC,MAChD,SAAAC,GACE,OAAOA,EAASC,UAElBF,MACA,SAAAG,GAAI,OAAI,EAAKT,SACX,CAACV,OAASmB,S,+BAOT,IAAD,EAEwBC,KAAKN,MAA5Bd,EAFD,EAECA,OAAQW,EAFT,EAESA,YACTU,EAAerB,EAAOsB,QAAO,SAAA7B,GAAI,OACrCA,EAAKE,KAAK4B,cAAcC,SAASb,EAAYY,kBAG/C,OACE,yBAAKjC,UAAU,OACb,+CACA,kBAAC,EAAD,CACEc,YAAY,cACZC,aAAgBe,KAAKf,eAEvB,kBAAC,EAAD,CAAUL,OAAUqB,S,GAvCVI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.6cb95178.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './card.style.css'\n\nexport const Card = props => {\n    return (\n        <div className = \"card-container\">\n            <img alt = 'hero'\n                src={`https://robohash.org/${props.hero.id}?set=set3&size=180x180`}\n            />\n            <h2 className=\"name-style\">{props.hero.name}</h2><br/>\n            {props.hero.email}\n        </div>\n    )\n}","import React, {Component} from \"react\"\nimport {Card} from \"../card/card.components\"\nimport './card-list.styles.css'\n\nexport const CardList = props => {\n    console.log(props)\n    return (\n        <div className = 'card-list'> \n            {props.heroes.map(hero =>\n                <Card key={hero.id} hero={hero} />\n            )}\n        </div>\n    )\n}\n\n// export function CardList(props) {\n//     console.log(props)\n//     return (\n//         <div className = \"card-list\"> {props.children} </div>\n//     )\n// }\n\n// export class CardList extends Component {\n//     constructor(props){\n//         super()\n//         this.props = props\n//     }\n\n//     render() {\n//         return(\n//             <div className = \"card-list\"> {this.props.children} </div>\n//         )\n//     }\n// }","import React from 'react'\nimport \"./search-box.styles.css\"\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input className = \"search\" \n        type = \"search\" \n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n)","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport {CardList} from \"./components/card-list/card-list.component\"\nimport {SearchBox} from \"./components/search-box/search-box.component\"\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      heroes : [],\n      searchField:\"\",\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(\n        response => {\n          return response.json()\n        }\n      ).then(\n        user => this.setState(\n          {heroes : user}\n        )\n      )\n  }\n\n  handleChange = e => this.setState({searchField: e.target.value})\n\n  render(){\n\n    const {heroes, searchField} = this.state;\n    const heroesFilter = heroes.filter(hero => \n      hero.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder=\"search hero\"\n          handleChange = {this.handleChange}\n        />\n        <CardList heroes = {heroesFilter} />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}